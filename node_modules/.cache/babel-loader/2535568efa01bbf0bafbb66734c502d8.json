{"ast":null,"code":"import { LOADING, GET_USERS_CONTRACTS, GET_WORKER_DETAIL, GET_USERS, GET_WORKERS, GET_USERNAME, POST_USER, GET_JOBS, GET_WORKERS_PREMIUM } from \"../actions/actions_vars\";\nconst initialState = {\n  workers: [],\n  users: [],\n  jobs: [],\n  workersPremium: [],\n  workerDetail: {},\n  selectedContracts: [],\n  isLoading: false\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case GET_USERS_CONTRACTS:\n      return { ...state,\n        selectedContracts: action.payload,\n        isLoading: false\n      };\n\n    case GET_WORKER_DETAIL:\n      return { ...state,\n        workerDetail: action.payload,\n        isLoading: false\n      };\n\n    case GET_USERS:\n      return { ...state,\n        users: action.payload\n      };\n\n    case GET_USERNAME:\n      return { ...state,\n        users: action.payload\n      };\n\n    case POST_USER:\n      return { ...state\n      };\n\n    case GET_JOBS:\n      return { ...state,\n        jobs: action.payload\n      };\n\n    case GET_WORKERS:\n      let workers = action.payload;\n      var totalrating = 0;\n\n      for (let i = 0; i < workers.length; i++) {\n        totalrating = 0;\n        workers[i].Contracts && workers[i].Contracts.map(contract => totalrating = totalrating + contract.rating_W);\n        workers[i].rating = totalrating / workers[i].Contracts.length;\n      }\n\n      return { ...state,\n        workers: action.payload\n      };\n\n    case GET_WORKERS_PREMIUM:\n      return { ...state,\n        workersPremium: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"names":["LOADING","GET_USERS_CONTRACTS","GET_WORKER_DETAIL","GET_USERS","GET_WORKERS","GET_USERNAME","POST_USER","GET_JOBS","GET_WORKERS_PREMIUM","initialState","workers","users","jobs","workersPremium","workerDetail","selectedContracts","isLoading","reducer","state","action","type","payload","totalrating","i","length","Contracts","map","contract","rating_W","rating"],"sources":["C:/Users/Gon/Desktop/Programacion/P-Grupal/Poyecto-Grupal/client/src/redux/reducer/reducer.js"],"sourcesContent":["import {LOADING,GET_USERS_CONTRACTS,GET_WORKER_DETAIL, GET_USERS, GET_WORKERS,GET_USERNAME, POST_USER, GET_JOBS, GET_WORKERS_PREMIUM} from \"../actions/actions_vars\"\r\n\r\nconst initialState = {\r\n  workers: [],\r\n  users: [],\r\n  jobs: [],\r\n  workersPremium: [],\r\n  workerDetail: {},\r\n  selectedContracts: [],\r\n  isLoading: false\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case LOADING:\r\n      return{\r\n        ...state,\r\n        isLoading:true\r\n      }\r\n    case GET_USERS_CONTRACTS:\r\n      return{\r\n        ...state,\r\n        selectedContracts:action.payload,\r\n        isLoading:false\r\n      }\r\n\r\n    case GET_WORKER_DETAIL:\r\n      return{\r\n        ...state,\r\n        workerDetail: action.payload,\r\n        isLoading:false\r\n      }\r\n    case GET_USERS:\r\n        return {\r\n          ...state,            \r\n          users: action.payload            \r\n        }\r\n    case GET_USERNAME:\r\n      return {\r\n        ...state,        \r\n        users: action.payload\r\n      }\r\n    case POST_USER:\r\n        return {\r\n          ...state\r\n        }\r\n    case GET_JOBS: \r\n      return{\r\n        ...state,\r\n        jobs : action.payload\r\n    }\r\n\r\n    case GET_WORKERS:\r\n      let workers = action.payload\r\n      var totalrating = 0\r\n      for (let i = 0; i < workers.length; i++) {\r\n        totalrating = 0\r\n        workers[i].Contracts && workers[i].Contracts.map(contract => totalrating = totalrating + contract.rating_W)\r\n        workers[i].rating = totalrating / workers[i].Contracts.length\r\n      }\r\n      return {\r\n        ...state,\r\n        workers: action.payload\r\n}\r\n    case GET_WORKERS_PREMIUM:\r\n      return {\r\n        ...state,\r\n        workersPremium: action.payload\r\n\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;"],"mappings":"AAAA,SAAQA,OAAR,EAAgBC,mBAAhB,EAAoCC,iBAApC,EAAuDC,SAAvD,EAAkEC,WAAlE,EAA8EC,YAA9E,EAA4FC,SAA5F,EAAuGC,QAAvG,EAAiHC,mBAAjH,QAA2I,yBAA3I;AAEA,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,EADU;EAEnBC,KAAK,EAAE,EAFY;EAGnBC,IAAI,EAAE,EAHa;EAInBC,cAAc,EAAE,EAJG;EAKnBC,YAAY,EAAE,EALK;EAMnBC,iBAAiB,EAAE,EANA;EAOnBC,SAAS,EAAE;AAPQ,CAArB;;AAUA,MAAMC,OAAO,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBT,YAAyB;EAAA,IAAXU,MAAW;;EAChD,QAAOA,MAAM,CAACC,IAAd;IACE,KAAKpB,OAAL;MACE,OAAM,EACJ,GAAGkB,KADC;QAEJF,SAAS,EAAC;MAFN,CAAN;;IAIF,KAAKf,mBAAL;MACE,OAAM,EACJ,GAAGiB,KADC;QAEJH,iBAAiB,EAACI,MAAM,CAACE,OAFrB;QAGJL,SAAS,EAAC;MAHN,CAAN;;IAMF,KAAKd,iBAAL;MACE,OAAM,EACJ,GAAGgB,KADC;QAEJJ,YAAY,EAAEK,MAAM,CAACE,OAFjB;QAGJL,SAAS,EAAC;MAHN,CAAN;;IAKF,KAAKb,SAAL;MACI,OAAO,EACL,GAAGe,KADE;QAELP,KAAK,EAAEQ,MAAM,CAACE;MAFT,CAAP;;IAIJ,KAAKhB,YAAL;MACE,OAAO,EACL,GAAGa,KADE;QAELP,KAAK,EAAEQ,MAAM,CAACE;MAFT,CAAP;;IAIF,KAAKf,SAAL;MACI,OAAO,EACL,GAAGY;MADE,CAAP;;IAGJ,KAAKX,QAAL;MACE,OAAM,EACJ,GAAGW,KADC;QAEJN,IAAI,EAAGO,MAAM,CAACE;MAFV,CAAN;;IAKF,KAAKjB,WAAL;MACE,IAAIM,OAAO,GAAGS,MAAM,CAACE,OAArB;MACA,IAAIC,WAAW,GAAG,CAAlB;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACc,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;QACvCD,WAAW,GAAG,CAAd;QACAZ,OAAO,CAACa,CAAD,CAAP,CAAWE,SAAX,IAAwBf,OAAO,CAACa,CAAD,CAAP,CAAWE,SAAX,CAAqBC,GAArB,CAAyBC,QAAQ,IAAIL,WAAW,GAAGA,WAAW,GAAGK,QAAQ,CAACC,QAA1E,CAAxB;QACAlB,OAAO,CAACa,CAAD,CAAP,CAAWM,MAAX,GAAoBP,WAAW,GAAGZ,OAAO,CAACa,CAAD,CAAP,CAAWE,SAAX,CAAqBD,MAAvD;MACD;;MACD,OAAO,EACL,GAAGN,KADE;QAELR,OAAO,EAAES,MAAM,CAACE;MAFX,CAAP;;IAIF,KAAKb,mBAAL;MACE,OAAO,EACL,GAAGU,KADE;QAELL,cAAc,EAAEM,MAAM,CAACE;MAFlB,CAAP;;IAKF;MACE,OAAOH,KAAP;EA1DJ;AA4DD,CA7DD;;AA+DA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}